import { save, load, getSaves } from '../src/save.js';
import { player } from './Player.js';
import cities from './Cities.js';
import Prompt from './Prompt.js';

const city = cities[player.getPlayerLocation()];

const cityTitles = city.buildings.titles;
const cityValues = city.buildings.values; 
const cityDescriptions = city.buildings.descriptions;

const townhallTitles = city.buildingsActions.townhall.titles;
const townhallDescriptions = city.buildingsActions.townhall.descriptions;
const townhallValues = city.buildingsActions.townhall.values;

const tavernTitles = city.buildingsActions.tavern.titles;
const tavernDescriptions = city.buildingsActions.tavern.descriptions;
const tavernValues = city.buildingsActions.tavern.values;

const marketTitles = city.buildingsActions.market.titles;
const marketDescriptions = city.buildingsActions.market.descriptions;
const marketValues = city.buildingsActions.market.values;

const engineeringTitles = city.buildingsActions.engineering.titles;
const engineeringDescriptions = city.buildingsActions.engineering.descriptions;
const engineeringValues = city.buildingsActions.engineering.values;

// const arenaTitles = city.buildingsActions.arena.titles;
// const arenaDescriptions = city.buildingsActions.arena.descriptions;
// const arenaValues = city.buildingsActions.arena.values;

// const blacksmithTitles = city.buildingsActions.blacksmith.titles;
// const blacksmithDescriptions = city.buildingsActions.blacksmith.descriptions;
// const blacksmithValues = city.buildingsActions.blacksmith.values;
// —Å–ª–µ–¥—É—é—â–µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –ø–æ —Ç–∏–ø—É 'Items'/'buyItems' –∏ –≤—Å—ë –≤ —Ç–∞–∫–æ–º –¥—É—Ö–µ

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
export let game = {
  isEnded: false,
  name: null
};

export const configs = {
  
  menu: () => {
    return new Prompt(
    '‚ò∞', ['üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞', '‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'ü™ü  –í—ã–π—Ç–∏'],
    ['startGame', 'savesList', 'saveGame', 'endGame'], [],
    (val) => {
      console.log(`val –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${val}`);
      if (val === 'endGame') game.isEnded = true;
      return val;
    })
  },
  

  /*
  menu: {
    getPrompt: () => {
      return new Prompt(
      '‚ò∞', ['üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞', '‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'ü™ü  –í—ã–π—Ç–∏'],
      ['startGame', 'savesList', 'saveGame', 'endGame'], [],
      (val) => {
        if (val === 'endGame') game.isEnded = true;
        return val;
      })
    },
  },
  */
 
  savesList: async () => {
    const saves = await getSaves();
    return new Prompt('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', saves, saves, [],
    async (saveName) => {
      game = await load(saveName);
      return 'startGame';
    });
  },

  /*
  savesList: {
    getPrompt: async () => {
      const saves = await getSaves();
      return new Prompt('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', saves, saves, [],
      async (saveName) => {
        game = await load(saveName);
        return 'startGame';
      });
    },
  },
  */

  saveGame: {
    getPrompt: () => {
      return {
        type: 'text',
        name: 'value',
        message: '–ö–∞–∫ –æ–±–∑–æ–≤–µ–º —Ç–µ–±—è, —Å–∞–ª–∞–≥–∞? (—Ä–µ—á—å –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏)',
        format: async (saveName) => {
          game.name = saveName;
          save(game, saveName);
          console.log('‚ùó –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–æ–ª–∑–ª–æ –ø–æ–¥ —à–∫–æ–Ω–∫—É –≤ saves, –Ω–∞—á–∞–ª—å–Ω–∏–∫');
          return 'menu';
        }
      }
    },
  },
  startGame: {
    getPrompt: () => {
      console.log(`–í—ã –∑–∞—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ ${player.getPlayerLocation()}.`);
      return new Prompt('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏: ', 
      cityTitles, cityValues, cityDescriptions);
    }
  },
  townhallActions: {
    getPromptData: () => {
      console.log('–í—ã –∑–∞—à–ª–∏ –≤ –≥–æ—Ä–æ–¥—Å–∫—É—é —Ä–∞—Ç—É—à—É.\n');
      return [ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', 
      townhallTitles, townhallValues, townhallDescriptions
    ]},
  },

  tavernActions: {
    getPromptData: () => {
      console.log('–í—ã –∑–∞—à–ª–∏ –≤ —Ç–∞–≤–µ—Ä–Ω—É.\n');
      return [ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', 
      tavernTitles, tavernValues, tavernDescriptions
    ]},
  },

  marketActions: {
    getPromptData: () => {
      console.log('–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Ä—ã–Ω–æ–∫.\n');
      return [ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', 
      marketTitles, marketValues, marketDescriptions
    ]},
  },

  engineeringActions: {
    getPromptData: () => {
      console.log('–í—ã –∑–∞—à–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏.\n');
      return [ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', 
      engineeringTitles, engineeringValues, engineeringDescriptions
    ]},
  },

  arenaActions: {
    getPromptData: () => {
      console.log('–í—ã –ø—Ä–∏—à–ª–∏ –Ω–∞ –∞—Ä–µ–Ω—É.\n');
      return [ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
      arenaTitles, arenaValues, arenaDescriptions
    ]},
  },

  blacksmithActions: {
    getPromptData: () => {
      console.log('–í—ã –∑–∞—à–ª–∏ –≤ –∫—É–∑–Ω–∏—Ü—É.\n');
      return [ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
      blacksmithTitles, blacksmithValues, blacksmithDescriptions
    ]},
  }
};
